buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1'
        classpath 'nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'org.kordamp.gradle:stats-gradle-plugin:0.2.0'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.15.0'
        classpath 'net.nemerosa:versioning:2.6.0'
    }
}

apply plugin: 'idea'
apply plugin: 'groovy'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'org.kordamp.gradle.stats'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'net.nemerosa.versioning'
apply from: 'gradle/publishing.gradle'
apply from: 'gradle/code-coverage.gradle'
apply from: 'gradle/code-quality.gradle'

repositories {
    jcenter()
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'pr'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

dependencies {
    compileOnly     'org.apache.maven.plugins:maven-shade-plugin:2.3'
    testCompileOnly 'org.apache.maven.plugins:maven-shade-plugin:2.3'
    testRuntime     'org.apache.maven.plugins:maven-shade-plugin:2.3'
    testCompile 'junit:junit:4.12'
    testCompile('org.spockframework:spock-core:1.1-groovy-2.4')
}

task sourceJar(type: Jar) {
    group 'Build'
    description 'An archive of the source code'
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    group 'Build'
    description 'An archive of the javadoc'
    from javadoc.outputs
    classifier 'javadoc'
}

jar.finalizedBy sourceJar
jar.finalizedBy javadocJar

artifacts {
    sourceJar
    javadocJar
}

tasks.withType(JavaCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}

tasks.withType(GroovyCompile) {
    sourceCompatibility = project.sourceCompatibility
    targetCompatibility = project.targetCompatibility
}


compileGroovy.enabled = false